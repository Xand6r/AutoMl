{"version":3,"sources":["utilities/speakerCard/assets/profileIcon.svg","components/train/assets/notification.svg","utilities/navbar/component/index.js","utilities/navbar/component/navbar.js","components/train/subcomponents/sectionTab/sectionTab.js","utilities/speakerCard/component/speakerCard.js","utilities/speakerCard/component/index.js","components/train/subcomponents/preprocessing/tab.js","components/train/subcomponents/preprocessing/preprocessing.js","components/train/subcomponents/generalDetails/generalDetails.js","components/train/subcomponents/modelSelection/modelSelection.js","axios/index.js","components/train/subcomponents/modelTrain/modelTrain.js","components/train/component/train.js","components/train/component/index.js","components/models/subcomponents/panel/panel.js","components/models/subcomponents/panel/index.js","components/models/component/model.js","components/models/component/index.js","App.js","serviceWorker.js","index.js","utilities/speakerCard/assets/samplepicture.svg","utilities/speakerCard/assets/playIcon.svg"],"names":["module","exports","NavBar","className","to","SectionTab","index","text","active","changeTab","onClick","SpeakerCard","fullname","company","position","skills","image","src","profileIcon","alt","playIcon","defaultProps","samplePicture","Tab","option","UPLOAD_OPTIONS","Personaldetails","stateChanger","state","useState","activeTab","fileLoading","setFileLoading","handleFormChange","event","target","name","value","getFile","a","url","d3","file","columns","target_dict","map","column","label","message","success","target_options","error","console","log","checkDetailsState","warning","htmlFor","disabled","maxLength","type","id","onChange","model_name","tab","key","Math","random","placeholder","files","onBlur","options","isSearchable","onFocus","notificationIcon","spinning","tip","Expertise","MODEL_PARAMETER_SELECTION","makeActive","clickedIndex","info","class","gender","encoding","normalisation","balancing","modelTypes","MODEL_CATEGORY","category","use_case","param","action","indexOf","selectedOption","model_type","axios","create","baseURL","timeout","validateState","Localstate","every","trainModel","postData","toLowerCase","post","then","res","data","window","location","replace","catch","err","STEPS","GENERAL_DETAILS_STATE","PREPROCESSING_STATE","preprocessing_action","MODEL_PARAMETERS","Register","setactiveTab","previewHidden","setPreviewHidden","generalDetails","setgeneralDetails","preprocessing","setPreprocessing","parameters","setParameters","fullState","useEffect","currentTab","pathname","split","Number","step","path","exact","render","props","METRICS_DICT","PanelHeader","title","metrics","metric","toUpperCase","Panel","Collapse","style","paddingLeft","Model","models","setModels","close","reload","openNotification","useCallback","Date","now","notification","open","description","onClose","get","sort","b","SettingTwoTone","twoToneColor","length","delay","bordered","defaultActiveKey","expandIcon","isActive","CaretRightOutlined","rotate","model","header","status","App","component","ModelPage","SignUpPage","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3331559.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profileIcon.3af9fdcb.svg\";","module.exports = __webpack_public_path__ + \"static/media/notification.51629ca4.svg\";","import NavBar from \"./navbar\";\n\nexport default NavBar;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './navbar.scss';\n\nexport default function navbar() {\n    return (\n        <div>\n            <div className=\"navigation\">\n\n                <Link className='link' to=\"/\">\n                    <div className=\"navigation__logo\">\n                        {/* <img src={Logo} alt=\"Speakspire Logo\"/> */}\n                        Auto<span>Model</span>\n                    </div>\n                </Link>\n\n                <div className=\"navigation__menu\">\n\n\n                    {/* <div className=\"navigation__menu__item --item\">\n                        Projects \n                    </div> */}\n\n                    <Link className='link' to=\"/\">\n                        <div className=\"navigation__menu__item --item\"> Models </div>\n                    </Link>\n\n                    <Link className='link' to=\"/train\">\n                        <div className=\"navigation__menu__item --item\"> Train </div>\n                    </Link>\n\n                    {/* <Link className=\"link\">\n                        <div className=\"navigation__menu__item --item\"> About Us </div>\n                    </Link> */}\n\n                    <Link className=\"link\" to=\"/login\">\n                        <div className=\"navigation__menu__item --outlinedbutton\"> Sign In </div>\n                    </Link>\n\n                    <Link className=\"link\" to=\"/category\">\n                        <div className=\"navigation__menu__item --filledbutton\"> Sign Up</div>\n                    </Link>\n                </div>\n\n            </div>\n        </div>\n    )\n}\n ","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './sectionTab.scss';\n\nconst SectionTab = ({\n    index,\n    text,\n    active,\n    changeTab\n}) => {\n    return (\n        <div \n            onClick={()=>{changeTab(index)}}\n            className={`sectiontab ${(active)?'--selected':'--unselected'}`}\n        >\n            <div className=\"sectiontab__icon\">\n                {index+1}\n            </div>\n            <div className=\"sectiontab__text\">\n                {text}\n            </div>\n        </div>\n    )\n}\n\nSectionTab.propTypes = {\n    index:PropTypes.number.isRequired,\n    text:PropTypes.string.isRequired,\n    active:PropTypes.bool.isRequired,\n    changeTab:PropTypes.func.isRequired,\n}\n\nexport default SectionTab\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './speakerCard.scss';\nimport samplePicture from '../assets/samplepicture.svg';\nimport playIcon from '../assets/playIcon.svg';\nimport profileIcon from '../assets/profileIcon.svg';\n\nconst tempskills = [\n    \"business\",\"leadership\",\"management\",\n    \"startup advisory\",\"aquisitions\"\n]\nexport default function SpeakerCard({\n    fullname, company, position, skills, image\n}) {\n    return (\n        <div>\n            <div className=\"speakercard\">\n                <div className=\"speakercard__tag --premium\">\n                    {/* premium */}\n                </div>\n\n                <div className=\"speakercard__profile\">\n                    <div className=\"speakercard__profile__picturewrapper\">\n                        {/* <img src={image} alt=\"profile\" className=\"pictureImage\"/> */}\n                    </div>\n                    <div className=\"speakercard__profile__name\">\n                       {/* {fullname} */}\n                    </div>\n                    <div className=\"speakercard__profile__position\">\n                        {/* <div className=\"--title\">{position}</div> */}\n                        {/* <div className=\"--company\">{company}</div> */}\n                    </div>\n\n                    <hr className=\"--divider\"/>\n\n                    <div className=\"speakercard__profile__footer\">\n                        <img src={profileIcon} alt=\"\"/>\n                        <img src={playIcon} alt=\"\"/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nSpeakerCard.propTypes= {\n    fullname: PropTypes.string,\n    company: PropTypes.string,\n    position: PropTypes.string,\n    skills: PropTypes.array,\n    image: PropTypes.string\n}\n\nSpeakerCard.defaultProps = {\n    fullname: 'Emeka Chukwuma',\n    company: 'Emeks Enterprises',\n    position: 'Chief Executive Officer',\n    skills: tempskills,\n    image: samplePicture\n}\n","import SpeakerCard from './speakerCard';\n\nexport default SpeakerCard;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './tab.scss';\n\nconst Tab = ({\n    option,\n    active,\n    changeTab,\n    index\n}) => {\n    return (\n        <div\n            onClick={()=>{changeTab(index)}}\n            className={`gendertab ${(active)?'--selected':'--unselected'}`}\n        >\n            <div className=\"gendertab__text\">\n                {option}\n            </div>   \n        </div>\n    )\n}\n\nTab.propTypes = {\n    index:PropTypes.number.isRequired,\n    option:PropTypes.string.isRequired,\n    active:PropTypes.bool.isRequired,\n    changeTab:PropTypes.func.isRequired,}\n\nexport default Tab\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport * as d3 from 'd3';\nimport PropTypes from 'prop-types';\nimport Tab from './tab';\nimport { message, Spin } from 'antd';\nimport Select from 'react-select'\n\n\n\nimport notificationIcon from '../../assets/notification.svg';\nimport './preprocessing.scss';\nimport 'react-phone-input-2/lib/style.css';\n\nconst UPLOAD_OPTIONS = [\n    'File Upload', 'URL'\n];\n\nexport default function Personaldetails({\n    stateChanger, state\n}) {\n    const [activeTab, setactiveTab] = useState(1);\n    const [fileLoading, setFileLoading] = useState(false);\n\n    const handleFormChange = (event)=>{\n        const {name, value} = event.target;\n        stateChanger({\n            ...state,\n            [name]: value\n          });\n    }\n\n    const getFile = async () =>{\n        setFileLoading(true)\n        // if the url is empty do nothing\n        if (!state.url){\n            setFileLoading(false)\n            return\n        }\n        try{\n            const file = await d3.csv(state.url);\n            if (file && file.columns[0] !== \"<!DOCTYPE html>\"){\n                const target_dict = file.columns.map(column => (\n                    {value:column, label:column}\n                ))\n                message.success(\"csv validated\", 5);\n                stateChanger({\n                    ...state,\n                    target_options : target_dict\n                  });\n            }\n            else{\n                message.error(\"please enter a valid csv file link\", 5);\n                stateChanger({\n                    ...state,\n                    url: ''\n                  });\n            }\n            setFileLoading(false)\n        }catch{\n            console.log('error')\n            message.error(\"please enter a valid csv file link\", 5);\n            stateChanger({\n                ...state,\n                url: ''\n              });\n            setFileLoading(false)\n        }\n    }\n\n\n    const checkDetailsState = () => state['model_name'] && state['target'] && (state['url'] || state['file'])\n\n    const onFileChange = event => {\n        stateChanger({\n            ...state,\n            file:  event.target.files[0]\n          });\n        console.log(state)\n      }; \n\n    const makeActive = (clickedIndex) => {\n        setactiveTab(clickedIndex)\n    }\n    \n    return (\n        <div className=\"personaldetails\">\n\n            <div className=\"personaldetails__heading\">\n                <div className=\"personaldetails__heading__header\">\n                    General Details\n                </div>\n                <div className=\"personaldetails__heading__subheading\">\n                    Enter in the general details of the model\n                </div>\n            </div>\n\n            <div className=\"personaldetails__formsection\">\n                {/* wrapepr for the name */}\n                <div \n                    className=\"--wrapper\"\n                    onClick = {()=>{\n                        message.warning('Only one project can be created for now');\n                    }\n\n                    }\n                >\n                    <label htmlFor=\"fullname\">Model Name</label>\n                    <input\n                        disabled\n                        maxLength=\"30\"\n                        type=\"text\"\n                        id=\"model_name\"\n                        name=\"model_name\"\n                        onChange={handleFormChange}\n                        value={state.model_name}\n                    />\n                </div>\n                {/* wrapepr for the name */}\n                \n                {/* wrapper for the gender */}\n                <div className=\"--wrapper\">\n                    <label htmlFor=\"fullname\">File Upload Option</label>\n                    <div className=\"--gendersection\">\n                        {\n                            UPLOAD_OPTIONS.map((tab, index)=>(\n                                <Tab \n                                    key={Math.random()}\n                                    option={tab}\n                                    index={index}\n                                    active={index === activeTab }\n                                    changeTab={() =>{\n                                        message.warning(\"file uploads disabled for now, please use a link\")\n                                    }}\n                                />\n                            ))\n                        }\n\n                    </div>\n                </div>\n\n                {\n                    (activeTab === 0)? \n                    (\n                        <div className=\"--wrapper\">\n                            <label htmlFor=\"email\">Upload file</label>\n                            <input\n                                type=\"file\"\n                                id=\"file\"\n                                name=\"file\"\n                                placeholder=\"Upload our file\"\n                                onChange={onFileChange}\n                            />\n                        </div>\n                    ):\n                    (\n                        <div className=\"--wrapper\">\n                            <label htmlFor=\"location\">Url</label>\n                            <input\n                                type=\"url\"\n                                id=\"url\"\n                                name=\"url\"\n                                placeholder=\"Enter The URL of you data\"\n                                onChange={handleFormChange}\n                                value={state.url}\n                                onBlur={getFile}\n                            />\n                        </div>\n                    )\n                }\n                <div className=\"--wrapper --select\">\n                    <label htmlFor=\"fullname\">Select your target variable</label>\n                    <div className=\"--singleselect\">\n                        <Select\n                            options={state.target_options}\n                            isSearchable\n                            placeholder=\"Target variable\"\n                            className=\"--item\"\n                            value={state.target}\n                            onChange = {\n                                (value)=>{\n                                    stateChanger({\n                                        ...state,\n                                        target : value\n                                    })\n                            }}\n                            onFocus={()=>{\n                                getFile()\n                            }}\n                        />\n                    </div>\n                </div>\n\n                \n\n            </div>\n\n            <div className=\"personaldetails__footer\">\n                <div className=\"--notification\">\n                    <img src={notificationIcon} alt=\"\"/>\n                    <div className=\"--text\">\n                        By uploading your data you agree to the \n                        <span> Terms and Conditions</span> and our <span>Privacy Policy</span>\n                    </div>\n                </div>\n                <Spin\n                        spinning={fileLoading}\n                        tip=\"Loading csv headers\"\n                    >\n                <div className=\"--button_group\">\n                    <div className=\"cancel\">\n                        Cancel\n                    </div>\n                    <Link\n                        className=\"link\"\n                        to={checkDetailsState()?\"/train/2\":\"/train/1\"}\n                        onClick={() =>{\n                            if(!checkDetailsState()){\n                                message.error(\"please fill in all fields before moving on\")\n                            }\n                        }}\n                    >\n                        <div className=\"next\">\n                            Next\n                        </div>\n                    </Link>\n                </div>\n                </Spin>\n            </div>\n\n        </div>\n    )\n}\n\nPersonaldetails.propTypes = {\n    stateChanger: PropTypes.func.isRequired,\n    state: PropTypes.instanceOf(Object).isRequired\n}","import React, {useState} from 'react';\nimport Select from 'react-select';\nimport Tab from '../preprocessing/tab';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { message } from 'antd';\n\n\nimport './generalDetails.scss';\nimport 'react-tagsinput/react-tagsinput.css';\nimport './tag.scss'\nexport default function Expertise({\n    stateChanger, state\n}) {\n     \n    const encoder_options = [\n        { value: 'binary', label: 'Binary encoder' },\n        { value: 'onehot', label: 'Onehot encoder' },\n        { value: 'sumencoder', label: 'Sum encoder' }\n    ]\n\n    const scaler_options = [\n        { value: 'standard', label: 'Standard scaler' },\n        { value: 'robust', label: 'Robust scaler' },\n        { value: 'minmax', label: 'Minmax scaler' }\n    ]\n\n    const balancing_options = [\n        { value: 'up_sample_minority_class', label: 'Minority Upsample' },\n        { value: 'random_over_sampling', label: 'Random Oversampling' },\n        { value: 'down_sample_majority_class', label: 'Majority Downsample' },\n        { value: 'random_under_sampling', label: 'Random Undersampling' }\n      ]\n\n    const MODEL_PARAMETER_SELECTION = [\n        'Auto', 'Manual'\n    ];\n\n    const checkDetailsState = () =>{\n        return (state['preprocessing_action'] === \"Auto\") || (\n            state['encoding'] && state['normalisation'] && state['balancing']\n        )\n    }\n    const [activeTab, setactiveTab] = useState(0);\n\n    const makeActive = (clickedIndex) => {\n        message.info(\"we currently only support auto parameter tuning\");\n        return;\n        setactiveTab(clickedIndex)\n        stateChanger({\n            ...state,\n            preprocessing_action: MODEL_PARAMETER_SELECTION[clickedIndex]\n          })\n    }\n\n\n\n    return (\n        <div className=\"expertise\">\n\n            <div className=\"personaldetails__heading\">\n                <div className=\"personaldetails__heading__header\">\n                    Preprocessing\n                </div>\n            </div>\n\n            <div className=\"expertise__formsection\">\n\n                <div className=\"expertise__formsection__section\">\n                    <div className=\"expertise__formsection__section__header\">\n                        <div className=\"--heading\">Preprocessing Parameters</div>\n                    </div>\n\n                    <div className=\"expertise__formsection__section__form\">\n\n                        <div className=\"--input_wrapper --select\">\n                            <label class=\"double\" htmlFor=\"position\">\n                                Select model training technique\n                                <span>Automatically train the model on the platform or manually select parameters.</span>\n                            </label>\n                            <div className=\"--gendersection\">\n                                {\n                                    MODEL_PARAMETER_SELECTION.map((gender, index)=>(\n                                        <Tab \n                                            key={Math.random()}\n                                            option={gender}\n                                            index={index}\n                                            active={index === activeTab }\n                                            changeTab={makeActive}\n                                        />\n                                    ))\n                                }\n\n                            </div>\n\n                        </div>\n\n                    </div>\n\n                    {\n                        (activeTab === 0)? \"\":\n                        (\n                        <>\n                            <div className=\"expertise__formsection__section__form\">\n\n                                <div className=\"--input_wrapper --select\">\n                                    <label class=\"double\" htmlFor=\"position\">\n                                        Encoding technique\n                                        <span>The Encoding techniques which are available.</span>\n                                    </label>\n                                    <div className=\"--singleselect\">\n                                        <Select\n                                            options={encoder_options}\n                                            isSearchable\n                                            placeholder=\"Encode your data\"\n                                            className=\"--item\"\n                                            value={state.encoding}\n                                            onChange = {(value)=>{\n                                                stateChanger({\n                                                    ...state,\n                                                    encoding: value\n                                                })\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n\n                            </div>\n\n                            <div className=\"expertise__formsection__section__form\">\n\n                                <div className=\"--input_wrapper --select\">\n                                    <label class=\"double\" htmlFor=\"position\">\n                                        Scaling and Normalisation technique\n                                        <span>The scaling and normalisation techniques which are available.</span>\n                                    </label>\n                                    <div className=\"--singleselect\">\n                                        <Select\n                                            options={scaler_options}\n                                            isSearchable\n                                            placeholder=\"Normalise your data\"\n                                            className=\"--item\"\n                                            value={state.normalisation}\n                                            onChange = {(value)=>{\n                                                stateChanger({\n                                                    ...state,\n                                                    normalisation: value\n                                                })\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n\n                            </div> \n\n                            <div className=\"expertise__formsection__section__form\">\n\n                                <div className=\"--input_wrapper --select\">\n                                    <label class=\"double\" htmlFor=\"position\">\n                                        Data Balancing technique\n                                        <span>The Technique to use to balance the dataset</span>\n                                    </label>\n                                    <div className=\"--singleselect\">\n                                        <Select\n                                            options={balancing_options}\n                                            isSearchable\n                                            placeholder=\"Balance your data\"\n                                            className=\"--item\"\n                                            value={state.balancing}\n                                            onChange = {(value)=>{\n                                                stateChanger({\n                                                    ...state,\n                                                    balancing: value\n                                                })\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n\n                            </div>\n\n\n                        </>\n\n                        )\n                    }\n\n\n                </div>\n            </div>\n\n            <div className=\"expertise__footer\">\n\n                <div className=\"--button_group\">\n                    <Link className=\"link\" to=\"/train/1\">\n\n                        <div className=\"cancel\">\n                            Back\n                        </div>\n\n                    </Link>\n                    <Link\n                        to={checkDetailsState()?\"/train/3\":\"/train/2\"}\n                        className=\"link\"\n                        onClick={() =>{\n                            console.log(state)\n                            if(!checkDetailsState()){\n                                message.error(\"please fill in all fields before moving on\")\n                            }\n                        }}\n                    >\n                        <div className=\"next\">\n                            Next\n                        </div>\n                    </Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nExpertise.propTypes = {\n    stateChanger: PropTypes.func.isRequired,\n    state: PropTypes.instanceOf(Object).isRequired\n}\n","import React from 'react';\nimport Select from 'react-select';\nimport Tab from '../preprocessing/tab';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { message, Spin } from 'antd';\n\n\nexport default function Expertise({\n    stateChanger, state\n}) {\n    \n    const RegressionModelTypes = [\n        { value: 'linear_regression', label: 'Linear Regression' },\n        { value: 'ridge_regression', label: 'Ridge Regression' },\n        { value: 'lasso_regression', label: 'Lasso Regression' },\n        { value: 'elastic_net_regression', label: 'ELastic Net Regression' },\n        { value: 'random_forest', label: 'Random Forest Regressor' },\n        { value: 'Support_vector_regression', label: 'Support Vector Regression' },\n    ]\n    const classificationModelTypes = [\n        { value: 'logistic_regression', label: 'Logistic Regression' },\n        // { value: 'xgb', label: 'Xtreme gradient boosting' },\n        // { value: 'catb', label: 'cat boosting classifier' },\n        // { value: 'random_forest', label: 'Random Forest Classifier'},\n    ]\n    const modelTypes = [\n        classificationModelTypes,\n        RegressionModelTypes\n    ]\n    const MODEL_PARAMETER_SELECTION = [\n        'Auto', 'Manual'\n    ];\n    const MODEL_CATEGORY = [\n        'Classification', 'Regression'\n    ]\n\n    const checkDetailsState = () => (state['use_case'] && (state['action'] === \"Auto\")) || (state['use_case'] && (state['action'] === \"Manual\") && state['model_type'])\n\n\n    return (\n        <div className=\"expertise\">\n\n            <div className=\"personaldetails__heading\">\n                <div className=\"personaldetails__heading__header\">\n                    Model\n                </div>\n            </div>\n\n            <div className=\"expertise__formsection\">\n\n                <div className=\"expertise__formsection__section\">\n                    <div className=\"expertise__formsection__section__header\">\n                        <div className=\"--heading\">Model Selection</div>\n                    </div>\n\n                    <div className=\"expertise__formsection__section__form\">\n\n                        <div className=\"--input_wrapper --select\">\n                            <label class=\"double\" htmlFor=\"position\">\n                                Select Model Use Case\n                                <span>Select classification or regression use case</span>\n                            </label>\n\n                            <div className=\"--gendersection\">\n                                {\n                                    MODEL_CATEGORY.map((category, index)=>(\n                                        <Tab \n                                            key={Math.random()}\n                                            option={category}\n                                            index={index}\n                                            active={category === state.use_case }\n                                            changeTab={()=>{\n                                                message.info(\"only classification as allowed for now\")\n                                                {/* stateChanger({\n                                                    ...state,\n                                                    use_case:category\n                                                }) */}\n                                                }\n                                            }\n                                        />\n                                    ))\n                                }\n\n                            </div>\n\n                        </div>\n\n                    </div>\n\n                    <div className=\"expertise__formsection__section__form\">\n\n                        <div className=\"--input_wrapper --select\">\n                            <label class=\"double\" htmlFor=\"position\">\n                                Select model\n                                <span>Automatic model selection or manual model selection</span>\n                            </label>\n\n                            <div className=\"--gendersection\">\n                                {\n                                    MODEL_PARAMETER_SELECTION.map((param, index)=>(\n                                        <Tab \n                                            key={Math.random()}\n                                            option={param}\n                                            index={index}\n                                            active={state.action === param }\n                                            changeTab={() => {\n                                                message.info(\"only manual model is allowed as allowed for now\")\n                                                {/* stateChanger({\n                                                    ...state,\n                                                    action: param\n                                                }) */}\n                                            }}\n                                        />\n                                    ))\n                                }\n\n                            </div>\n\n                        </div>\n\n                    </div>\n\n                    {\n                        (state.action === 'Auto')? \"\":\n                        (\n                        <>\n                            <div className=\"expertise__formsection__section__form\">\n\n                                <div className=\"--input_wrapper --select\">\n                                    <label class=\"double\" htmlFor=\"position\">\n                                        Model Type\n                                        <span>The Types of models which are available to train data with.</span>\n                                    </label>\n                                    <div className=\"--singleselect\">\n                                        <Select\n                                            options={modelTypes[MODEL_CATEGORY.indexOf(state.use_case)]}\n                                            isSearchable\n                                            placeholder=\"Select your model\"\n                                            className=\"--item\"\n                                            onChange={(selectedOption)=>{\n                                                stateChanger({\n                                                    ...state,\n                                                    model_type:selectedOption.value\n                                                })\n                                            }}\n                                        />\n                                    </div>\n                                </div>\n\n                            </div>\n                        </>\n\n                        )\n                    }\n                    \n                </div>\n            </div>\n\n            <div className=\"expertise__footer\">\n\n                <div className=\"--button_group\">\n                    <Link className=\"link\" to=\"/train/3\">\n                        <div className=\"cancel\">\n                            Back\n                        </div>\n                    </Link>\n                    <Link\n                        className=\"link\"\n                        to={checkDetailsState()?\"/train/4\":\"/train/3\"}\n                        onClick={() =>{\n                            if(!checkDetailsState()){\n                                message.error(\"please fill in all fields before moving on\")\n                            }\n                        }}\n                    >\n                        <div className=\"next\">\n                            Next\n                        </div>\n                    </Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nExpertise.propTypes = {\n    stateChanger: PropTypes.func.isRequired,\n    state: PropTypes.instanceOf(Object).isRequired\n}\n","import axios from 'axios';\n\nexport default axios.create({\n    baseURL: 'http://104.248.19.124:8000',\n    timeout: 1000,\n  });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport axios from '../../../../axios';\nimport { message } from 'antd';\nimport './modelTrain.scss';\n\n\nexport default function Expertise({\n    state\n}) {\n\n    const validateState = (Localstate) =>{\n        const important_paramters = [\n            \"model_name\",\"model_type\",\n            \"url\",\"target\", \"use_case\"\n        ]\n        return important_paramters.every((param) =>{\n            return Localstate[param]\n        })\n    }\n    \n    const trainModel = async () =>{\n        if(!validateState(state)){\n            message.error(\"kindly fill all fields in the form\")\n            return;\n        }\n        console.log(validateState(state))\n        const postData = {\n            \"name\":state.model_name,\n            \"model_name\":state.model_type,\n            \"file_link\" : state.url,\n            \"target\": state.target.value,\n            \"model_type\":state.use_case.toLowerCase()\n        }\n        axios.post(\"aiml/projects/create/\",postData)\n        .then(res=>{\n            message.success(res.data.message,10)\n            window.location.replace(\"/\");\n        })\n        .catch(err=>{\n            message.error(`there was an error ${err.message}`,10)\n            window.location.replace(\"/train/1\");\n        })\n    }\n    return (\n        <div className=\"expertise\">\n            <div\n                className=\"expertise__train_button\"\n                onClick={trainModel}\n            >\n                TRAIN\n            </div>\n        </div>\n    )\n}\n\nExpertise.propTypes = {\n    state: PropTypes.instanceOf(Object).isRequired\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Switch,\n    Link,\n    Route // for later\n  } from 'react-router-dom';\n\nimport {component as NavBar} from '../../../utilities/navbar';\nimport {component as SectionTab} from '../subcomponents/sectionTab';\nimport {component as SpeakerCard} from '../../../utilities/speakerCard'\nimport {component as PersonalDetail} from '../subcomponents/preprocessing';\nimport {component as Expertise} from '../subcomponents/generalDetails';\nimport {component as ModelSelection} from '../subcomponents/modelSelection';\nimport {component as ModelTrain} from '../subcomponents/modelTrain';\n\nimport './train.scss';\n\n\nconst STEPS = [\n    'General Details', 'Preprocessing',\n    'Model Selection', 'Train'\n]\nconst GENERAL_DETAILS_STATE = {\n    model_name:'Project One',\n    url:'https://res.cloudinary.com/xand6r/raw/upload/v1597574095/datasets/iris_gudrhr.csv',\n    file:'',\n    target_options:[],\n    target:''\n}\nconst PREPROCESSING_STATE = {\n    preprocessing_action:'Auto',\n    encoding:'',\n    normalisation:'',\n    balancing:''\n}\nconst MODEL_PARAMETERS ={\n    use_case:'Classification',\n    action:'Manual',\n    model_type:null\n}\n\nexport default function Register({\n    location\n}) {\n    const [activeTab, setactiveTab] = useState(0);\n    const [previewHidden, setPreviewHidden ] = useState(false);\n    const [generalDetails, setgeneralDetails] = useState(GENERAL_DETAILS_STATE);\n    const [preprocessing, setPreprocessing] = useState(PREPROCESSING_STATE);\n    const [parameters, setParameters] = useState(MODEL_PARAMETERS);\n\n    const fullState = {\n        ...generalDetails,\n        ...preprocessing,\n        ...parameters\n    }\n\n    useEffect(()=>{\n        const {pathname} = location;\n        const currentTab = pathname.split(\"/\")[2]\n        if(!currentTab){\n            setactiveTab(0)\n            return\n        }\n        setactiveTab(Number(currentTab)-1)\n    },[setactiveTab, location])\n\n    const makeActive = (clickedIndex) => {\n        setactiveTab(clickedIndex)\n    }\n\n    return (\n        <div className=\"register\">\n            {/* the navigation bar component */}\n            <NavBar />\n            {/* the navigation bar component */}\n\n            {/* the section for tapping which form to fill  */}\n            <div className=\"register__activetab\">\n                {\n                    STEPS.map((step, index)=>(\n                        <Link\n                            key={Math.random()}\n                            className=\"link\"\n                            //to={`/train/${index+1}`}\n                        >\n                            <SectionTab\n                                \n                                index={index}\n                                text={step}\n                                active={index === activeTab }\n                                changeTab={makeActive}\n                            />\n                        </Link>\n                    ))\n                }\n            </div>\n            {/* the section for tapping which form to fill  */}\n\n            {/* the section actually showing the mail content */}\n            <div className=\"register__content\">\n                <div>\n                <div \n                    className={`register__content__preview ${(previewHidden)?\"--small\":\"--large\"}`}\n                >\n                    <div className=\"register__content__preview__header\">\n                        <span>Model Preview</span>\n                        <i\n                            onClick={()=>{setPreviewHidden(!previewHidden)}}\n                            className={(previewHidden)?\"fa fa-eye\":\"fa fa-eye-slash\"}\n                        >\n                        </i>\n                    </div>\n                    {\n                        (!previewHidden)?\n                            <div className=\"register__content__preview__card\">\n\n                                <SpeakerCard\n                                />\n                            </div>\n                            :\"\"\n                    }\n                    <div className=\"register__content__preview__footer\">\n                        preview the basic model based on the selected parameters\n                        parameters \n                    </div>\n                    </div>\n                </div>\n                <div className=\"register__content__form\">\n                    <Switch>\n                        <Route\n                            path = \"/train/(1)?\"\n                            exact\n                            render={(props) => (\n                                <PersonalDetail {...props} \n                                    stateChanger = {setgeneralDetails}\n                                    state = {generalDetails}\n                                />\n                            )}\n                        />\n                        <Route\n                            path = \"/train/2\"\n                            exact\n                            render={(props) => (\n                                <Expertise {...props}\n                                    state = {preprocessing}\n                                    stateChanger = {setPreprocessing}\n                                />\n                            )}\n                        />\n                        <Route\n                            path = \"/train/3\"\n                            exact\n                            render={(props) => (\n                                <ModelSelection {...props}\n                                    state = {parameters}\n                                    stateChanger = {setParameters}\n                                />\n                            )}\n                        />\n                        <Route\n                            path = \"/train/4\"\n                            exact\n                            render={(props) => (\n                                <ModelTrain {...props}\n                                    state = {fullState}\n                                />\n                            )}\n                        />\n                        \n                    </Switch>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nRegister.propTypes = {\n    location: PropTypes.instanceOf(Object).isRequired\n}","import Register from './train';\n\nexport default Register;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Statistic} from 'antd';\n\nimport './panel.scss'\n\nconst METRICS_DICT = {\n    \"classification\":['recall','precision','f1_score']\n} \n\nconst PanelHeader = ({\n    title, metrics, type\n}) => {\n    console.log(metrics)\n    return (\n        <div>\n            <div className=\"panel\">\n                <div className=\"panel__tag\">\n                    {type}\n                </div>\n                <div className=\"panel__title\">\n                    {title}\n                </div>\n                <div className=\"panel__statistics\">\n                        {\n                            METRICS_DICT[type].map((metric) => (\n                                <Statistic\n                                    title={metric.toUpperCase()}\n                                    value={metrics?metrics[metric]:0}\n                                />\n                            ))\n                        }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nPanelHeader.propTypes = {\n    title: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    metrics: PropTypes.instanceOf(Object).isRequired,\n}\n\nexport default PanelHeader\n"," import PanelHeader from './panel';\n\n export default PanelHeader;","import React, { useState, useEffect , useCallback } from 'react';\nimport axios from '../../../axios';\nimport {component as NavBar} from '../../../utilities/navbar';\nimport {\n    SettingTwoTone, CaretRightOutlined \n} from '@ant-design/icons';\nimport PanelHeader from '../subcomponents/panel';\nimport {\n    Collapse, Spin, notification \n} from 'antd';\nimport './model.scss';\n\n\n\nconst { Panel } = Collapse;\nconst text = (\n    <p style={{ paddingLeft: 24 }}>\n     Further statistics will be displayed here .... coming soon\n    </p>\n  );\n\n\n\nexport default function Model() {\n    const [models, setModels ] = useState([]);\n\n    const close = () => {\n        // reload the page to trigger the alert\n        window.location.reload()\n    };\n    const openNotification = useCallback(() => {\n        const key = `open${Date.now()}`;\n        notification.open({\n          message: 'Error Fetching Models',\n          description: `${\"errormessage\"}.\\n we would keep trying, kindly check your internet`,\n          key,\n          onClose: close,\n        });\n    },[]);\n\n    useEffect(() => {\n        axios.get(`/aiml/models/all/`)\n        .then(res => {\n            const models = res.data.data.sort((a,b)=>b.id-a.id);\n            setModels(models)\n        })\n        .catch((err) => {\n            openNotification(err.message)\n        })\n    },[openNotification])\n\n    return (\n        <div className=\"model\">\n            {/* the navigation bar component */}\n            <NavBar />\n            {/* the navigation bar component */}\n\n            {/* the headin text of the model page */}\n            <div className=\"--heading\">\n                <div className=\"model__header\">\n                    <span>Models</span>\n                    <SettingTwoTone\n                        twoToneColor=\"#162359\"\n                    />\n                </div>\n\n                <div className=\"model__subheader\">\n                    Find the models which have been trained under your project here\n                </div>\n            </div>\n            {/* the headin text of the model page */}\n\n            {/* The collapse component to display the models information */}\n            <Spin\n                tip=\"Loading models\"\n                spinning={!models.length}\n                delay={500}\n            >\n                <div className=\"model__collapse\">\n                    <Collapse\n                        bordered={false}\n                        defaultActiveKey={['1']}\n                        expandIcon={({ isActive }) => <CaretRightOutlined rotate={isActive ? 90 : 0} />}\n                        className=\"site-collapse-custom-collapse\"\n                    >\n                    {\n                        models.map((model, index) => (\n                                <Panel \n                                    //{/* disabled */}\n                                    header={\n                                        <Spin\n                                            tip=\"Model Currently Training \"\n                                            spinning={model.status === \"MODEL_TRAINING\"}\n                                        >\n                                            <PanelHeader\n                                                title = {model.name}\n                                                metrics = {model.metrics}\n                                                type = {model.type}\n                                            />\n                                        </Spin>\n                                    }\n                                    key={model.id}\n                                    className=\"site-collapse-custom-panel\"\n                                >\n                                    <p>{text}</p>\n                                </Panel>\n                        ))\n                    }\n\n                    </Collapse>,\n                </div>\n            </Spin>\n        </div>\n    )\n}\n","import Model from './model';\n\nexport default Model;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { component as SignUpPage } from './components/train';\nimport { component as ModelPage } from './components/models';\n\n\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact  path='/' component={ModelPage} />\n      <Route path='/train' component={SignUpPage} />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/samplepicture.5b586866.svg\";","module.exports = __webpack_public_path__ + \"static/media/playIcon.038ce551.svg\";"],"sourceRoot":""}